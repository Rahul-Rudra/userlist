{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.baseUrl;\n      this.users$ = new BehaviorSubject([]);\n      this.totalCount$ = new BehaviorSubject(0);\n    }\n\n    getusers(page) {\n      return this.http.get(this.baseUrl + 'api/users' + '?page=' + page).pipe(map(data => {\n        return data ? data : false;\n      }), tap(items => {\n        if (items) {\n          this.users$.next(items.data);\n          this.totalCount$.next(items.total);\n        }\n      }), catchError(err => {\n        return of(false);\n      }));\n    }\n\n    update(id, payload) {\n      return this.http.put(this.baseUrl + 'api/users/' + id, payload).pipe(map(responseData => {\n        return responseData;\n      }), tap(item => {\n        if (item) {\n          this.updateItem(id, item);\n        }\n      }), catchError(err => {\n        return of(false);\n      }));\n    }\n\n    updateItem(id, item) {\n      const currentItems = this.users$.getValue();\n\n      if (currentItems.length > 0) {\n        const index1 = currentItems.findIndex(element => {\n          return element.id === Number(id);\n        });\n        item.id = Number(id);\n\n        if (index1 >= 0) {\n          currentItems[index1] = item;\n          console.log('item', item);\n          this.users$.next(currentItems);\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    getUserById(id) {\n      return this.http.get(this.baseUrl + 'api/users/' + id).pipe(map(data => {\n        return data;\n      }), catchError(err => {\n        return of(false);\n      }));\n    }\n\n    deleteuser(id) {\n      return this.http.delete(this.baseUrl + 'api/users/' + id).pipe(map(data => {\n        return data;\n      }), tap(success => {\n        this.delete(id);\n      }), catchError(err => {\n        return of(false);\n      }));\n    }\n\n    delete(id) {\n      const currentUsers = this.users$.getValue();\n\n      if (currentUsers.length > 0) {\n        const index1 = currentUsers.findIndex(element => {\n          return element.id === id;\n        });\n\n        if (index1 >= 0) {\n          currentUsers.splice(index1, 1);\n          this.users$.next(currentUsers);\n          let total = this.totalCount$.getValue() - 1;\n          this.totalCount$.next(total);\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    add(payload) {\n      return this.http.post(this.baseUrl + 'api/users', payload).pipe(map(responseData => {\n        return responseData;\n      }), tap(item => {\n        if (item) {\n          const currentItems = this.users$.getValue();\n          currentItems.pop();\n          currentItems.push(item); // let total=this.totalCount$.getValue()+1\n          //   this.totalCount$.next(total)\n\n          this.users$.next(currentItems);\n        }\n      }), catchError(err => {\n        return of(false);\n      }));\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}